/// <pre>
/// Copyright (c) Alex Woodhead 2020
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
/// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/// 
/// License MIT
/// Source: https://github.com/alexatwoodhead/ompare
/// Version: 1.0
/// </pre>
/// Capture product deployment metadata context about the Namespace being analysed.
/// These minimum contexts will make it simpler to report configuration for comparing accross environments.
/// The following diagram shows the relationship of deployment concepts:
/// <ol><li>Organisation - (eg: ACME and MEEP)</li>
/// <li>System - (eg: PlanA and PlanB)</li>
/// <li>Environment - (eg: BASE, TEST, UAT, PROD)</li></ol>
/// In the example code is developed for two customers on a single shared inhouse development instance.
/// Each customer provides 3 seperate instances to support TEST, UAT and PROD stages.
/// The cylinders represent namespaces. In the example each logical product deployment consists of two participating namespaces.
/// Components for PlanA (System) occupy one namespace and components PlanB (System) occupy the other.
/// <img src="data:image/png;base64, "/><br/>
/// Metadata is added to each target namespace for next and subsequent analysis.
/// Update the lookup global using Interoperability LookupTables or Global Explorer in SMP or directly.
/// When first run in each namespace the following blank defaults will be added if no previous setting is detected.
/// <example>
/// ^Ens.LookupTable("ompare.Namespace","Organisation")=""
/// ^Ens.LookupTable("ompare.Namespace","System")=""
/// ^Ens.LookupTable("ompare.Namespace","Environment")=""
/// </example>
/// A complete configuration would be:
/// <example>
/// ^Ens.LookupTable("ompare.Namespace","Organisation")="MEEP"
/// ^Ens.LookupTable("ompare.Namespace","System")="PlanA"
/// ^Ens.LookupTable("ompare.Namespace","Environment")="TEST"
/// </example>
Class ompare.SourceHandler.Namespace Extends ompare.SourceHandler.Base
{

/// Ensure this Code doesn't collide with other sub-class implementations of Base
/// Eg: "CLS" abbreviation for class
Parameter TypeCode As %String;

/// Do not invoke supporting methods on this class definition
ClassMethod IndexNamespace(namespace = "", logging = 0, includeSource = 0, schedule As ompare.Schedule = {$$$NULLOREF}) As %Status
{
	#define RPTType "?"
	
	/*****************************
	 Start Template
	******************************/
	#dim tmpStream as %Stream.TmpCharacter
	Set tmpStream=##class(%Stream.TmpCharacter).%New()
	// It is necessary to switch namespace context within the method call as source code may not be 
	// deployed to target namespace
	set ret=$$$OK
	
	Quit:namespace="" $$$ERROR(5001,"Namespace not supplied to Namespace Source Handler")
	
	New $NAMESPACE  // Ensures when method exits process will be returned to the original namespace
	
	try {	
		 // Generates <NAMESPACE> error if namespace doesn't exist
		 // Generate <PROTECT> error if user does not have access privilage
		set $NAMESPACE=namespace
	} catch errobj {
		// Name
		// Code
		// Location
		// Data
		if errobj.Name="<NAMESPACE>" {
			set ret=$$$ERROR(5001,"Cannot index namespace "_namespace_". Namespace does not exist.")
		} elseif errobj.Name="" {
			set ret=$$$ERROR(50001,"Cannot index namesapce "_namespace_". User "_$USERNAME_" does not have permission.")
		} else {
			set ret=$$$ERROR(5001,"Unknow error "_errobj.Name_". In code "_errobj.Code_" at location "_errobj.Location)
		}
	}
	Quit:$$$ISERR(ret) ret
	
	
	// Invoke sub-class extension code
	//Do IndexerMain
	try {
		// Invoke sub-class extension code
		Do IndexerMain  //(logging, includeSource)
	} catch ex {
		// Always report issue in output
		Do Log("Error","In SourceHandler.ClassDefinition")
		Do Log("  Name:",ex.Name)
		Do Log("  Code:",ex.Code)
		Do Log("  Location:",ex.Location)
		Do Log("  Data:",ex.Data)
		Set ret=ex.AsStatus()
	}
	
	Quit ret
Log(label, value)
	W !,label,":",value
	Quit
IndexerMain
	// Defaults
	if '$Data(^Ens.LookupTable("ompare.Namespace","Organisation")) {
		set ^Ens.LookupTable("ompare.Namespace","Organisation")=""
	}
	if '$Data(^Ens.LookupTable("ompare.Namespace","System")) {
		set ^Ens.LookupTable("ompare.Namespace","System")=""	
	}
	if '$Data(^Ens.LookupTable("ompare.Namespace","Environment")) {
		set ^Ens.LookupTable("ompare.Namespace","Environment")=""	
	}

	// Only record data on top node of ^||Data
	
	// Current Date
	set $P(^||Data,"^")=+$H
	
	// Current Time
	set $P(^||Data,"^",2)=$P($H,",",2)
	
	// Active Source Control Class
	set sourceControlClass=$G(^SYS("SourceControlClass"))
	if sourceControlClass'="" {
		set $P(^||Data,"^",3)=sourceControlClass
	} else {
		do:logging Log(label, value)
	}
	
	// Check for whether this is %Studio.SourceControl.ISC or empty
	if sourceControlClass'="" {
		if ##class(%Dictionary.CompiledMethod).%ExistsId(sourceControlClass_"||Locked") {
			// Is SourceControl Locked
			set $P(^||Data,"^",4)=$$Escape($CLASSMETHOD(sourceControlClass,"Locked"))
		}
		if ##class(%Dictionary.CompiledMethod).%ExistsId(sourceControlClass_"||Disconnected") {
			// Is SourceControl Connected
			set $P(^||Data,"^",5)=$$Escape($CLASSMETHOD(sourceControlClass,"Disconnected"))
		}
	} else {
		do:logging Log("Namespace Handler","Source Control Class not found")
	}
	
	if ##class(%Dictionary.CompiledClass).%ExistsId("Ens.Director") {
		// Current Production Name
		Do ##class(Ens.Director).GetProductionStatus(.pProduction,.pStatus)
		set $P(^||Data,"^",6)=$$Escape(pProduction)
		do:logging Log("Namespace","Current Production: "_pProduction)
	}
	
	// Organisation
	set $P(^||Data,"^",7)=$$Escape(^Ens.LookupTable("ompare.Namespace","Organisation"))
	// System
	set $P(^||Data,"^",8)=$$Escape(^Ens.LookupTable("ompare.Namespace","System"))
	// Environment
	set $P(^||Data,"^",9)=$$Escape(^Ens.LookupTable("ompare.Namespace","Environment"))
	
	// Role
	set $P(^||Data,"^",10)=$$Escape($G(^SYS("SourceControl","Misc","SU_Role")))
	// Tags
	set $P(^||Data,"^",11)=$$Escape($G(^SYS("SourceControl","Misc","SU_Tags")))
	// Depreciate Comment
	set $P(^||Data,"^",12)=$$Escape($G(^SYS("SourceControl","Misc","SU_Depreciate")))
	
	/***********************
	  End Indexer Specific code
	************************/
	Quit
Escape(data)
  Quit $TR(data,"\/^|")
}

}

